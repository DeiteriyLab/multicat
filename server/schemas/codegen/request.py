# generated by datamodel-codegen:
#   filename:  request.json

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    model_config = ConfigDict(
        from_attributes=True,
    )
    root: Any


class HashcatMode(str, Enum):
    """
    Defines the mode of operation for Hashcat, indicating specific requirements for wordlists and masks.
    """

    STRAIGHT = "STRAIGHT"
    COMBINATION = "COMBINATION"
    BRUTE_FORCE = "BRUTE_FORCE"
    HYBRID_WORDLIST_MASK = "HYBRID_WORDLIST_MASK"
    HYBRID_MASK_WORDLIST = "HYBRID_MASK_WORDLIST"
    ASSOCIATION = "ASSOCIATION"


class Request(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    hashes: List[str] = Field(..., description="List of hashes to be processed.")
    mode: HashcatMode
    wordlists: Optional[List[str]] = Field(
        None, description="Optional list of wordlists required by certain modes."
    )
    masks: Optional[List[str]] = Field(
        None, description="Optional list of masks required by certain modes."
    )
    rules_files: Optional[List[str]] = Field(
        None, description="Optional list of rule files."
    )
