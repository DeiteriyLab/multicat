# generated by datamodel-codegen:
#   filename:  hashes.json

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Model(RootModel[Any]):
    model_config = ConfigDict(
        from_attributes=True,
    )
    root: Any


class AttackMode(str, Enum):
    """
    Defines the mode of attack in Hashcat.
    """

    DICTIONARY = "DICTIONARY"
    COMBINATOR = "COMBINATOR"
    MASK = "MASK"
    HYBRID_DICT_MASK = "HYBRID_DICT_MASK"
    HYBRID_MASK_DICT = "HYBRID_MASK_DICT"


class HashType(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    hashcat_type: int
    human_readable: str


class HashCrackedValueMapping(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    hash: str = Field(..., description="The cryptographic hash that needs cracking.")
    cracked_value: str = Field(
        ..., description="The value resulting from cracking the hash."
    )


class HashIdMapping(BaseModel):
    model_config = ConfigDict(
        from_attributes=True,
    )
    id: int = Field(..., description="The unique identifier for the hash record.")
    hash: str = Field(..., description="The cryptographic hash associated with the id.")
